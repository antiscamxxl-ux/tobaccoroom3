// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web App SDK
try {
    Telegram.WebApp.ready();
    Telegram.WebApp.expand();
} catch (e) {
    console.error("Telegram Web App SDK is not available.");
}

const BACKEND_URL = 'https://antiscamxxl-ux.github.io/tobaccoroom3/'; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® URL

// –≠–ª–µ–º–µ–Ω—Ç—ã
const welcomeScreen = document.getElementById('welcome-screen');
const shopScreen = document.getElementById('shop-screen');
const cartScreen = document.getElementById('cart-screen');
const checkoutScreen = document.getElementById('checkout-screen');

const continueButton = document.getElementById('continue-button');
const cartButtonHeader = document.getElementById('view-cart-button'); 
const cartCounter = document.getElementById('cart-counter');
const backFromCartButton = document.getElementById('back-from-cart');
const checkoutButton = document.getElementById('checkout-button');
const backToCartButton = document.getElementById('back-to-cart');
const placeOrderButton = document.getElementById('place-order-button');
const checkoutForm = document.getElementById('checkout-form');

const modal = document.getElementById('question-modal');
const openQuestionButton = document.getElementById('open-question-modal');
const modalCloseButton = document.getElementById('modal-close-button');
const modalSendButton = document.getElementById('modal-send-button');

const shopHeader = document.querySelector('#shop-screen .shop-header');
const contentArea = document.getElementById('content-area');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ
let currentScreenId = 'welcome-screen';
let currentProducts = {}; // –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ID
let currentCategories = []; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
let cart = {}; // { productId: quantity }

// ----------------------------------------------------
// 1. –£–ü–†–ê–í–õ–ï–ù–ò–ï –≠–ö–†–ê–ù–ê–ú–ò –ò –ê–ù–ò–ú–ê–¶–ò–Ø–ú–ò
// ----------------------------------------------------

function switchScreen(fromId, toId) {
    const fromScreen = document.getElementById(fromId);
    const toScreen = document.getElementById(toId);
    
    if (fromScreen && toScreen) {
        fromScreen.style.opacity = '0';
        fromScreen.style.transform = 'translateY(-20px)';
        
        setTimeout(() => {
            fromScreen.classList.remove('active');
            
            toScreen.classList.add('active');
            toScreen.style.opacity = '1';
            toScreen.style.transform = 'translateY(0)';

            currentScreenId = toId;

            if (toId === 'shop-screen') {
                if (currentCategories.length === 0) {
                    loadShopCategories();
                } else {
                    // –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ shop-screen, –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    renderCategories(currentCategories);
                }
            }
            
            if (toId === 'cart-screen') {
                renderCart();
            }
            if (toId === 'checkout-screen') {
                updateCheckoutSummary();
            }
        }, 500);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
window.onload = () => {
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è CSS-–∞–Ω–∏–º–∞—Ü–∏–π (1.5—Å + –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å)
    setTimeout(() => {
        continueButton.classList.remove('hidden');
    }, 2000); 
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —à–∞–ø–∫–µ —Å—Ä–∞–∑—É
    cartButtonHeader.addEventListener('click', () => switchScreen(currentScreenId, 'cart-screen'));
    openQuestionButton.addEventListener('click', openQuestionModal);
    updateCartDisplay(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
};

continueButton.addEventListener('click', () => {
    switchScreen('welcome-screen', 'shop-screen');
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
backFromCartButton.addEventListener('click', () => switchScreen('cart-screen', 'shop-screen'));
backToCartButton.addEventListener('click', () => switchScreen('checkout-screen', 'cart-screen'));
checkoutButton.addEventListener('click', () => switchScreen('cart-screen', 'checkout-screen'));


// ----------------------------------------------------
// 2. –§–£–ù–ö–¶–ò–û–ù–ê–õ –í–ò–¢–†–ò–ù–´ (–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
// ----------------------------------------------------

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderCategories(categories) {
    // 1. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–ø–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏)
    shopHeader.querySelector('.shop-title').textContent = 'TOBACCO ROOM 46';
    shopHeader.querySelector('.header-actions').innerHTML = `
        <button id="view-cart-button" class="cart-button-header">
            üõí (<span id="cart-counter">${Object.values(cart).reduce((sum, qty) => sum + qty, 0)}</span>)
        </button>
        <button id="open-question-modal" class="question-button">
            –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        </button>
    `;
    // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
    document.getElementById('view-cart-button').addEventListener('click', () => switchScreen(currentScreenId, 'cart-screen'));
    document.getElementById('open-question-modal').addEventListener('click', openQuestionModal);
    updateCartDisplay();

    // 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    contentArea.className = 'categories-grid';
    contentArea.innerHTML = categories.map(category => `
        <div class="category-card" data-category-id="${category.id}">
            <p class="category-title">${category.name}</p>
            <small style="color: gray;">${category.count} —Ç–æ–≤–∞—Ä–æ–≤</small>
        </div>
    `).join('');

    // 3. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    contentArea.querySelectorAll('.category-card').forEach(card => {
        card.addEventListener('click', () => {
            const categoryId = parseInt(card.dataset.categoryId);
            const category = categories.find(c => c.id === categoryId);
            loadProducts(categoryId, category.name);
        });
    });
}


async function loadShopCategories() {
    contentArea.innerHTML = '<div style="text-align: center;">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏—Ç—Ä–∏–Ω—ã...</div>';
    
    try {
        const response = await fetch(`${BACKEND_URL}/api/shop/categories`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
        
        const result = await response.json();
        currentCategories = result.categories; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        if (currentCategories.length === 0) {
             contentArea.innerHTML = '<p style="text-align: center;">–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.</p>';
             return;
        }

        renderCategories(currentCategories);

    } catch (error) {
        contentArea.innerHTML = '<div style="color: red; text-align: center;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞.</div>';
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
    }
}

async function loadProducts(categoryId, categoryName) {
    // 1. –ò–∑–º–µ–Ω—è–µ–º —à–∞–ø–∫—É –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤
    shopHeader.querySelector('.shop-title').textContent = categoryName;
    shopHeader.querySelector('.header-actions').innerHTML = `
        <button id="back-to-categories-from-products" class="question-button" style="background-color: #6c757d;">
            ‚Üê –ù–∞–∑–∞–¥
        </button>
    `;
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç loadShopCategories
    document.getElementById('back-to-categories-from-products').addEventListener('click', () => renderCategories(currentCategories));

    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    contentArea.className = 'products-list';
    contentArea.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...';

    try {
        const response = await fetch(`${BACKEND_URL}/api/shop/products/${categoryId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏.');
        
        const result = await response.json();
        const products = result.products;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
        products.forEach(p => currentProducts[p.id] = p);

        if (products.length === 0) {
            contentArea.innerHTML = '<p style="text-align: center; color: var(--text-dark);">–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.</p>';
            return;
        }

        contentArea.innerHTML = products.map(product => `
            <div class="product-card">
                <h4 class="product-name">${product.name}</h4>
                <p class="product-description">${product.description}</p>
                <div class="product-price">
                    <span style="font-weight: 700; color: var(--primary-blue);">${product.price} ‚ÇΩ</span>
                </div>
                <button class="action-button add-to-cart-btn" data-product-id="${product.id}">
                    –í –∫–æ—Ä–∑–∏–Ω—É
                </button>
            </div>
        `).join('');

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–í –∫–æ—Ä–∑–∏–Ω—É"
        contentArea.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const productId = parseInt(e.currentTarget.dataset.productId);
                addToCart(productId);
            });
        });

    } catch (error) {
        contentArea.innerHTML = '<p style="color: red; text-align: center;">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã.</p>';
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    }
}


// ----------------------------------------------------
// 3. –§–£–ù–ö–¶–ò–û–ù–ê–õ –ö–û–†–ó–ò–ù–´
// ----------------------------------------------------

function addToCart(productId) {
    cart[productId] = (cart[productId] || 0) + 1;
    updateCartDisplay();
    try {
        Telegram.WebApp.showPopup({ message: `${currentProducts[productId].name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!` });
    } catch (e) {
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:', currentProducts[productId].name);
    }
}

function removeFromCart(productId, removeAll = false) {
    if (!cart[productId]) return;

    if (removeAll || cart[productId] <= 1) {
        delete cart[productId];
    } else {
        cart[productId] -= 1;
    }
    updateCartDisplay();
    if (currentScreenId === 'cart-screen') {
        renderCart(); 
    }
}

function updateCartDisplay() {
    const totalItems = Object.values(cart).reduce((sum, qty) => sum + qty, 0);
    cartCounter.textContent = totalItems;
}

function calculateCartTotal() {
    return Object.entries(cart).reduce((total, [id, qty]) => {
        const product = currentProducts[parseInt(id)];
        return total + (product ? product.price * qty : 0);
    }, 0);
}

function renderCart() {
    const container = document.getElementById('cart-items-container');
    const totalElement = document.getElementById('cart-total-price');
    const summaryBox = document.getElementById('cart-summary');
    const emptyMessage = document.getElementById('empty-cart-message');

    const items = Object.entries(cart).map(([id, qty]) => ({
        product: currentProducts[parseInt(id)],
        quantity: qty
    })).filter(item => item.product);

    const total = calculateCartTotal();
    totalElement.textContent = `${total.toFixed(0)} ‚ÇΩ`;
    
    if (items.length === 0) {
        container.innerHTML = '';
        emptyMessage.style.display = 'block';
        summaryBox.classList.add('hidden');
        return;
    }

    emptyMessage.style.display = 'none';
    summaryBox.classList.remove('hidden');

    container.innerHTML = items.map(item => `
        <div class="cart-item" data-product-id="${item.product.id}">
            <div class="cart-item-info">
                ${item.product.name}
                <span style="display: block; font-size: 14px; color: #6c757d;">${item.product.price} ‚ÇΩ x ${item.quantity}</span>
            </div>
            <div class="cart-item-actions">
                <button class="qty-btn remove-one-btn" data-id="${item.product.id}">-</button>
                <span>${item.quantity}</span>
                <button class="qty-btn add-one-btn" data-id="${item.product.id}">+</button>
                <button class="qty-btn remove-all-btn" data-id="${item.product.id}" style="background-color: #dc3545;">‚ùå</button>
            </div>
        </div>
    `).join('');

    // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    container.querySelectorAll('.add-one-btn').forEach(btn => btn.addEventListener('click', (e) => addToCart(parseInt(e.currentTarget.dataset.id))));
    container.querySelectorAll('.remove-one-btn').forEach(btn => btn.addEventListener('click', (e) => removeFromCart(parseInt(e.currentTarget.dataset.id))));
    container.querySelectorAll('.remove-all-btn').forEach(btn => btn.addEventListener('click', (e) => removeFromCart(parseInt(e.currentTarget.dataset.id), true)));
}

// ----------------------------------------------------
// 4. –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê
// ----------------------------------------------------

function updateCheckoutSummary() {
    const finalTotalElement = document.getElementById('final-total-price');
    const total = calculateCartTotal();
    finalTotalElement.textContent = `${total.toFixed(0)} ‚ÇΩ`;
}

checkoutForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    placeOrderButton.disabled = true;
    placeOrderButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

    const orderData = {
        name: document.getElementById('user-name').value.trim(),
        phone: document.getElementById('user-phone').value.trim(),
        comment: document.getElementById('user-address').value.trim(),
        
        cartItems: Object.entries(cart).map(([id, qty]) => ({
            productId: parseInt(id),
            quantity: qty,
            price: currentProducts[parseInt(id)].price,
            name: currentProducts[parseInt(id)].name
        })),
        totalPrice: calculateCartTotal(),
        
        initData: Telegram.WebApp.initData,
        user: Telegram.WebApp.initDataUnsafe.user 
    };

    try {
        const response = await fetch(`${BACKEND_URL}/api/order/place`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(orderData)
        });
        
        const result = await response.json();

        if (result.success) {
            cart = {}; // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
            updateCartDisplay();
            
            Telegram.WebApp.showAlert('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.');
            switchScreen('checkout-screen', 'shop-screen');
        } else {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞:', error);
        Telegram.WebApp.showAlert(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: ${error.message}`);
    } finally {
        placeOrderButton.disabled = false;
        placeOrderButton.textContent = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑';
    }
});


// ----------------------------------------------------
// 5. –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û "–ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°"
// ----------------------------------------------------

function openQuestionModal() {
    modal.classList.add('visible');
}

modalCloseButton.addEventListener('click', () => {
    modal.classList.remove('visible');
});

// ----------------------------------------------------
// 5. –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û "–ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°" (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î)
// ----------------------------------------------------

// ... (—Ñ—É–Ω–∫—Ü–∏—è openQuestionModal –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
// ... (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ modalCloseButton –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

modalSendButton.addEventListener('click', async () => {
    const questionText = document.getElementById('modal-question-input').value.trim();
    
    if (questionText.length < 5) {
        Telegram.WebApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).');
        return;
    }
    
    modalSendButton.disabled = true;
    modalSendButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

    const issueData = {
        questionText: questionText,
        initData: Telegram.WebApp.initData
    };

    try {
        const response = await fetch(`${BACKEND_URL}/api/issue/submit`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(issueData)
        });
        
        const result = await response.json();

        if (result.success) {
            Telegram.WebApp.showAlert('‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!');
            modal.classList.remove('visible');
            document.getElementById('modal-question-input').value = '';
        } else {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
        Telegram.WebApp.showAlert(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å: ${error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'}`);
    } finally {
        modalSendButton.disabled = false;
        modalSendButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
    }
});